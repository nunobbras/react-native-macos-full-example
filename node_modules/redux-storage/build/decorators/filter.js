'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _lodash = require('lodash.set');

var _lodash2 = _interopRequireDefault(_lodash);

var _lodash3 = require('lodash.unset');

var _lodash4 = _interopRequireDefault(_lodash3);

var _lodash5 = require('lodash.isfunction');

var _lodash6 = _interopRequireDefault(_lodash5);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

exports.default = function (engine) {
    var whitelist = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];
    var blacklist = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];

    return _extends({}, engine, {
        save: function save(state) {
            var saveState = {};

            whitelist.forEach(function (key) {
                var value = state;

                // Support strings for one-level paths
                if (typeof key === 'string') {
                    key = [key]; // eslint-disable-line no-param-reassign
                }

                key.forEach(function (keyPart) {
                    // Support immutable structures
                    if ((0, _lodash6.default)(value.has) && (0, _lodash6.default)(value.get)) {
                        if (!value.has(keyPart)) {
                            // No value stored
                            return;
                        }

                        value = value.get(keyPart);
                    } else if (value.hasOwnProperty(keyPart)) {
                        value = value[keyPart];
                    } else {
                        // No value stored
                        return;
                    }

                    (0, _lodash2.default)(saveState, key, value);
                });
            });

            blacklist.forEach(function (key) {
                // Support strings for one-level paths
                if (typeof key === 'string') {
                    key = [key]; // eslint-disable-line no-param-reassign
                }

                (0, _lodash4.default)(saveState, key);
            });

            return engine.save(saveState);
        }
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kZWNvcmF0b3JzL2ZpbHRlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2tCQUllLFVBQUMsTUFBRCxFQUE0QztRQUFuQyxrRUFBWSxrQkFBdUI7UUFBbkIsa0VBQVksa0JBQU87O0FBQ3ZELHdCQUNPO0FBRUgsNEJBQUssT0FBTztBQUNSLGdCQUFNLFlBQVksRUFBWixDQURFOztBQUdSLHNCQUFVLE9BQVYsQ0FBa0IsVUFBQyxHQUFELEVBQVM7QUFDdkIsb0JBQUksUUFBUSxLQUFSOzs7QUFEbUIsb0JBSW5CLE9BQU8sR0FBUCxLQUFlLFFBQWYsRUFBeUI7QUFDekIsMEJBQU0sQ0FBQyxHQUFELENBQU47QUFEeUIsaUJBQTdCOztBQUlBLG9CQUFJLE9BQUosQ0FBWSxVQUFDLE9BQUQsRUFBYTs7QUFFckIsd0JBQUksc0JBQVcsTUFBTSxHQUFOLENBQVgsSUFBeUIsc0JBQVcsTUFBTSxHQUFOLENBQXBDLEVBQWdEO0FBQ2hELDRCQUFJLENBQUMsTUFBTSxHQUFOLENBQVUsT0FBVixDQUFELEVBQXFCOztBQUVyQixtQ0FGcUI7eUJBQXpCOztBQUtBLGdDQUFRLE1BQU0sR0FBTixDQUFVLE9BQVYsQ0FBUixDQU5nRDtxQkFBcEQsTUFPTyxJQUFJLE1BQU0sY0FBTixDQUFxQixPQUFyQixDQUFKLEVBQW1DO0FBQ3RDLGdDQUFRLE1BQU0sT0FBTixDQUFSLENBRHNDO3FCQUFuQyxNQUVBOztBQUVILCtCQUZHO3FCQUZBOztBQU9QLDBDQUFJLFNBQUosRUFBZSxHQUFmLEVBQW9CLEtBQXBCLEVBaEJxQjtpQkFBYixDQUFaLENBUnVCO2FBQVQsQ0FBbEIsQ0FIUTs7QUErQlIsc0JBQVUsT0FBVixDQUFrQixVQUFDLEdBQUQsRUFBUzs7QUFFdkIsb0JBQUksT0FBTyxHQUFQLEtBQWUsUUFBZixFQUF5QjtBQUN6QiwwQkFBTSxDQUFDLEdBQUQsQ0FBTjtBQUR5QixpQkFBN0I7O0FBSUEsc0NBQU0sU0FBTixFQUFpQixHQUFqQixFQU51QjthQUFULENBQWxCLENBL0JROztBQXdDUixtQkFBTyxPQUFPLElBQVAsQ0FBWSxTQUFaLENBQVAsQ0F4Q1E7O01BSGhCLENBRHVEO0NBQTVDIiwiZmlsZSI6ImZpbHRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzZXQgZnJvbSAnbG9kYXNoLnNldCc7XG5pbXBvcnQgdW5zZXQgZnJvbSAnbG9kYXNoLnVuc2V0JztcbmltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJ2xvZGFzaC5pc2Z1bmN0aW9uJztcblxuZXhwb3J0IGRlZmF1bHQgKGVuZ2luZSwgd2hpdGVsaXN0ID0gW10sIGJsYWNrbGlzdCA9IFtdKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4uZW5naW5lLFxuXG4gICAgICAgIHNhdmUoc3RhdGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHNhdmVTdGF0ZSA9IHt9O1xuXG4gICAgICAgICAgICB3aGl0ZWxpc3QuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gc3RhdGU7XG5cbiAgICAgICAgICAgICAgICAvLyBTdXBwb3J0IHN0cmluZ3MgZm9yIG9uZS1sZXZlbCBwYXRoc1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICBrZXkgPSBba2V5XTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGtleS5mb3JFYWNoKChrZXlQYXJ0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFN1cHBvcnQgaW1tdXRhYmxlIHN0cnVjdHVyZXNcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24odmFsdWUuaGFzKSAmJiBpc0Z1bmN0aW9uKHZhbHVlLmdldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdmFsdWUuaGFzKGtleVBhcnQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm8gdmFsdWUgc3RvcmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLmdldChrZXlQYXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZS5oYXNPd25Qcm9wZXJ0eShrZXlQYXJ0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZVtrZXlQYXJ0XTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vIHZhbHVlIHN0b3JlZFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgc2V0KHNhdmVTdGF0ZSwga2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgYmxhY2tsaXN0LmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIFN1cHBvcnQgc3RyaW5ncyBmb3Igb25lLWxldmVsIHBhdGhzXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIGtleSA9IFtrZXldOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdW5zZXQoc2F2ZVN0YXRlLCBrZXkpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBlbmdpbmUuc2F2ZShzYXZlU3RhdGUpO1xuICAgICAgICB9XG4gICAgfTtcbn07XG4iXX0=
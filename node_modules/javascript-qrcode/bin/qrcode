#!/usr/bin/env node

var program = require('commander');
var fs = require('fs');
var qc = require('../lib/qrcode');

function getPbm(code, modulesize, quietZoneSize) {
    'use strict';

    var magicNumber = 'P1';
    var width = code.length * modulesize;
    var height = code.length * modulesize;
    var i, r, c;

    var content = [
        magicNumber,
        '# QR Code Model 2',
        '# Generated by javascript-qrcode.',
        width + ' ' + height
    ];

    for (r = 0; r < code.length; r += 1) {
        var row = [];

        for (c = 0; c < code[r].length; c += 1) {
            row.push(new Array(modulesize + 1).join(code[r][c] + ' '));
        }

        for (var s = 0; s < modulesize; s += 1) {
            content.push(row.join(''));
        }
    }

    return  content.join("\n");
}

function getSvg(code, modulesize, quietZoneSize) {
    'use strict';

    var width = code.length * modulesize;
    var height = code.length * modulesize;
    var r, c;

    var d = '';

    for (r = 0; r < code.length; r += 1) {
        for (c = 0; c < code[r].length; c += 1) {
            if (code[r][c] === 1) {
                d += 'M' + ((c + quietZoneSize) * modulesize) + ' ' + ((r + quietZoneSize) * modulesize) + 'h' + modulesize + 'v' + modulesize + 'h-' + modulesize + 'z';
            }
        }
    }

    var content = [
        '<svg xmlns="http://www.w3.org/2000/svg" style="shape-rendering:crispEdges" viewBox="0 0 ' + (width + 2 * quietZoneSize * modulesize) + ' ' + (height + 2 * quietZoneSize * modulesize) + '">',
        '<title>QR Code Model 2</title>',
        '<desc>Generated by javascript-qrcode.</desc>',
        '<path d="' + d + '"/>',
        '</svg>'
    ];

    return  content.join("\n");
}

function getContent(format, code, modulesize, quietZoneSize) {
    'use strict';

    switch (format) {
        case 'pbm':
            return getPbm(code, modulesize, quietZoneSize);
        case 'svg':
            return getSvg(code, modulesize, quietZoneSize);
        case 'default':
            throw 'Unsupported format.';
    }
    return null;
}

program
    .version('0.0.1')
    .option('-d, --data [data]', 'input data string', null)
    .option('-i, --input-file [file]', 'path to input data file.', null)
    .option('-o, --output-file [file]', 'path to output file.', 'qrcode')
    .option('-e, --error-correction [L|M|Q|H]', 'error correction level.', 'L')
    .option('-m, --mask-pattern [pattern]', 'specific mask pattern, default auto.', parseInt, -100)
    .option('-n, --version-number [1-40]', 'QR Code version number.', null)
    .option('-s, --module-size [size]', 'single module size in pixels.', parseInt, 3)
    .option('-z, --quiet-zone-size [size]', 'quiet zone (border) size in modules.', parseInt, 4)
    .option('-f, --format [format]', 'image file format (svg, pbm).', 'svg')
    .parse(process.argv);

var ecstrategy = [program.errorCorrection];
var data = program.data;

try {

    if (program.inputFile !== null) {
        data = fs.readFileSync(program.inputFile, 'utf8', function (err) {
            'use strict';

            if (err) {
                throw err;
            }
        });
    }

    if (data === null) {
        program.help();
    }
    else {
        var maskPattern = program.maskPattern;

        if(program.maskPattern === -100) {
            maskPattern = null;
        }

        var qrcode = new qc.QrCode(data, ecstrategy, maskPattern, parseInt(program.versionNumber));
        var info = qrcode.getInfo();

        var content = getContent(program.format, qrcode.getData(), parseInt(program.moduleSize), parseInt(program.quietZoneSize));

        if (program.outputFile === null) {
            console.log(content);
        }
        else {
            fs.writeFile(program.outputFile + '.' + program.format, content, function (err) {
                'use strict';

                if (err) {
                    throw err;
                }
            });
        }
    }

} catch (e) {
    console.log('');
    console.log('  ERROR: ' + e);
    program.help();
}